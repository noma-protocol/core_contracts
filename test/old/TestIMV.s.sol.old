// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "forge-std/Test.sol";
import { IDOHelper } from  "./IDO_Helper/IDOHelper.sol";
import { Utils } from  "../src/libraries/Utils.sol";
import {BaseVault} from  "../src/vault/BaseVault.sol";
import {IDOHelper} from  "./IDO_Helper/IDOHelper.sol";
import {LiquidityType, ProtocolAddresses} from "../src/types/Types.sol";
import {Deployer} from "../src/Deployer.sol";
import {DecimalMath} from "../src/libraries/DecimalMath.sol";

interface IWETH {
    function deposit() external payable;
    function transfer(address to, uint value) external returns (bool);
}

interface IERC20 {
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function mint(address receiver, uint256 amount) external;
    function approve(address spender, uint256 amount) external;
}

interface IModelHelper {
    function getTotalSupply(address pool, bool isToken0) external view returns (uint256);
    function getIntrinsicMinimumValue(address vault) external returns (uint256);
}

struct ContractAddressesJson {
    address IDOHelper;
    address ModelHelper;
    address Proxy;
}

contract TestIMV is Test {
    // Command to deploy:
    // forge script script/Deploy.s.sol --rpc-url=<RPC_URL> --broadcast --slow

    // Get environment variables.
    address feeTo = vm.envAddress("FEE_TO");
    uint256 privateKey = vm.envUint("PRIVATE_KEY");
    address deployer = vm.envAddress("DEPLOYER");
    bytes32 salt = keccak256(bytes(vm.envString("SALT")));

    // Constants
    address WETH = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;
    address payable idoManagerAddress;
    uint256 public result;


    function setUp() public {  
        vm.recordLogs();
        vm.startBroadcast(privateKey);

        // Define the file path
        string memory root = vm.projectRoot();
        string memory path = string.concat(root, "/deploy_helper/out/out.json");

        // Read the JSON file
        string memory json = vm.readFile(path);

        string memory networkId = "56";
        // Parse the data for network ID `56`
        bytes memory data = vm.parseJson(json, string.concat(string("."), networkId));

        // Decode the data into the ContractAddresses struct
        ContractAddressesJson memory addresses = abi.decode(data, (ContractAddressesJson));
    
        // Extract addresses from JSON
        idoManagerAddress = payable(addresses.IDOHelper);

        IDOHelper idoManager = IDOHelper(idoManagerAddress);
        address modelHelper = idoManager.modelHelper();

        BaseVault vault = idoManager.vault();

        uint256 imv = IModelHelper(modelHelper).getIntrinsicMinimumValue(address(vault));
        console.log("Intrinsic minimum value is %d", imv);
        
        uint256 borrowAmount = 1 ether;

        uint256 collateralAmount = DecimalMath.divideDecimal(borrowAmount, imv);

        console.log("Collateral amount is %d", collateralAmount);

        uint256 newCollateralValue = 
        DecimalMath.multiplyDecimal(
            collateralAmount, 
            IModelHelper(modelHelper).getIntrinsicMinimumValue(address(vault))
        );

        console.log("New collateral value is %d", newCollateralValue);
        
        testCalcLoanFees(borrowAmount);

        testCalculateLoanFees(borrowAmount, 30 days);
    }

    function testCalcLoanFees(uint256 borrowAmount) public {
        // uint256 value = 1 * 10**18; // Scale the value to handle precision
        uint256 percentage = 27; // 0.027% represented as 27
        uint256 _days = 30;

        // Perform the calculation using fixed-point arithmetic
        uint256 scaledPercentage = percentage * 10**12; // Scale the percentage to match the precision

        // Calculate the result
        result = (borrowAmount * scaledPercentage * _days) / (100 * 10**18);
        console.log("Result is %d", result);
    }    


    function testCalculateLoanFees(uint256 borrowAmount, uint256 duration) internal view returns (uint256 fees) {
        uint256 percentage = 27; // 0.027% 
        uint256 scaledPercentage = percentage * 10**12; 
        fees = (borrowAmount * scaledPercentage * (duration / 86400)) / (100 * 10**18);
        console.log("Fees is %d", fees);
    }    

    function testMath() public {
        uint256 MAX_UINT256 = type(uint256).max;
        uint256 INITIAL_FRAGMENTS_SUPPLY = 1_000_000 * 10**18;
        uint256 TOTAL_GONS = MAX_UINT256 - (MAX_UINT256 % INITIAL_FRAGMENTS_SUPPLY);
        uint256 MAX_SUPPLY = ~uint128(0);

        uint256 _totalSupply;
        uint256 _gonsPerFragment;        
    }

}
